const data = [
  "0724794121412",
  "72489756136",
  "4044426557270",
  "4057284006248",
  "4057284006330",
  "4057284006910",
  "4057284006347",
  "4057284006927",
  "4057284006293",
  "4057284006255",
  "4058031619728",
  "4059319343816",
  "4059322852046",
  "4059322852077",
  "4060509652533",
  "4060515416150",
  "4060515416167",
  "4060515412060",
  "4060515412015",
  "4060515416181",
  "4060515130803",
  "4060515130773",
  "4060515130780",
  "4060515130827",
  "4059812106918",
  "4060515348758",
  "4060515348703",
  "4060515344583",
  "4060515348642",
  "4061626704075",
  "4061626704068",
  "4061626704143",
  "4061626704099",
  "4061626822953",
  "4061616852847",
  "4061616852823",
  "4061616856937",
  "4061616852786",
  "4061616852762",
  "4061616852793",
  "4061616852854",
  "4062053214519",
  "4062053214496",
  "4062053214533",
  "4062053214403",
  "4062053214458",
  "4062053238324",
  "4062053237839",
  "4062053238331",
  "4062053237778",
  "4062053237761",
  "4062053238386",
  "4062051499505",
  "4062051499475",
  "4062051499468",
  "4060511177772",
  "4060511177734",
  "4060511177673",
  "4060511177697",
  "4060511177789",
  "4060511181328",
  "4060509397328",
  "4060509397366",
  "4060509397670",
  "4060509397335",
  "4060509397311",
  "4060512030366",
  "4060512030380",
  "4060512030342",
  "4060512030359",
  "4060512030311",
  "4060512030328",
  "4062058634596",
  "4062058634626",
  "4062058634572",
  "4062058634442",
  "4062055332051",
  "4062054812059",
  "4062054812226",
  "4062054812172",
  "4062054812103",
  "4062058660595",
  "4062058660649",
  "4062058657144",
  "4062058657182",
  "4062054781713",
  "4062054781690",
  "4062054781720",
  "4062054781706",
  "4062054781683",
  "4062054762187",
  "4062054763290",
  "4062054685424",
  "4062054685462",
  "4062054685455",
  "4062054685417",
  "4062054685479",
  "4062062618636",
  "4062062618674",
  "4062062618698",
  "4062062422363",
  "4062062418670",
  "4062062422424",
  "4060517059300",
  "4060517059362",
  "4060517059287",
  "4060517059294",
  "4060517055913",
  "4060517059386",
  "4060517059393",
  "4064037257451",
  "4064037257468",
  "4064037257413",
  "4064037257543",
  "4064037257406",
  "4064037257376",
  "4064037257420",
  "4062061198924",
  "4062061198993",
  "4062061199020",
  "4062061199075",
  "4062061198986",
  "4062061199051",
  "4062065538498",
  "4062065538535",
  "4062065538474",
  "4062065542174",
  "4062065538504",
  "4062065538481",
  "4062065542181",
  "4062065538511",
  "4062065542198",
  "4062065542143",
  "4064047353150",
  "4064047353174",
  "4064047356816",
  "4064047353167",
  "4064047353181",
  "4064047395884",
  "4064047395846",
  "4064047395938",
  "4064047399516",
  "4064047395853",
  "4064047399493",
  "4064047395914",
  "4064047399561",
  "4064047395839",
  "4064047399530",
  "4064047356908",
  "4064047356946",
  "4064047356892",
  "4064047356984",
  "4064047356939",
  "4064047356960",
  "4064047360615",
  "4064047357011",
  "4064047357028",
  "4064047326208",
  "4064047326260",
  "4064047326246",
  "4064047326192",
  "4064047326239",
  "4064047326161",
  "4062062150976",
  "4061612207313",
  "4061612226369",
  "4060522562758",
  "4060522562833",
  "4060522562826",
  "4064041758012",
  "4064041754373",
  "4064041742820",
  "4064041742769",
  "4064041742844",
  "4062065485273",
  "4062065485303",
  "4062065167971",
  "4062065171602",
  "4062065171596",
  "4062065171619",
  "4062065167957",
  "4064045195509",
  "4064045195554",
  "4064045195547",
  "4064045199200",
  "4064044977137",
  "4064044976994",
  "4064044977113",
  "4064044977021",
  "4062065140622",
  "4062065136960",
  "4062065140691",
  "4062065140714",
  "4064045221451",
  "4064045225138",
  "4064045221499",
  "4064045225145",
  "4064044184153",
  "4064044184092",
  "4064044184122",
];

// Function to download an image
async function downloadImage(url, filePath) {
  const writer = fs.createWriteStream(filePath);
  const response = await axios({
    url,
    method: "GET",
    responseType: "stream",
  });

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });
}

// Fetch image sources using Puppeteer
const imageSources = await page.$$eval(
  ".c-product-detail__thumb-image",
  (images) =>
    images
      .slice(0, 3)
      .map((img) => img.getAttribute("srcset"))
      .filter((srcset) => srcset !== null)
);

// Download and store images
for (let i = 0; i < imageSources.length; i++) {
  const imageUrl = imageSources[i];
  const fileName = `image_${i + 1}.jpg`;
  const filePath = `path/to/save/${fileName}`;

  try {
    await downloadImage(imageUrl, filePath);
    console.log(`Image ${i + 1} downloaded successfully.`);
  } catch (error) {
    console.error(`Failed to download image ${i + 1}: ${error}`);
  }
}
